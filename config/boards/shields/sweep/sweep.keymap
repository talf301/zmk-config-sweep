/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>



&mt {
	tapping-term-ms = <201>;
	flavor = "tap-preferred";
};
&sk {
	release-after-ms = <2000>;
	quick-release;
};

/* Layers */
#define AL1 0
#define AL2 1
#define SM1 2
#define SM2 3	
#define NM1 4	
#define SYS 5
#define LSYS 6	
#define AL2U 7
/ { 
	combos {
		compatible = "zmk,combos";
		combo_sys {
			timeout-ms = <30>;
			key-positions = <6 7 8>;
			bindings = <&to SYS>;
		};
		combo_lsys {
			timeout-ms = <30>;
			key-positions = <1 2 3>;
			bindings = <&to LSYS>;
		};
		combo_caps {
			timeout-ms = <30>;
			key-positions = <16 17 18>;
			bindings = <&caps_word>;
		};
		lclk {
			timeout-ms = <20>;
			key-positions = <16 17>;
			bindings = <&mkp LCLK>;
			layers = <SYS>;
		};
		rclk {
			timeout-ms = <20>;
			key-positions = <6 7>;
			bindings = <&mkp RCLK>;
			layers = <SYS>;
		};
		llclk {
			timeout-ms = <20>;
			key-positions = <12 13>;
			bindings = <&mkp LCLK>;
			layers = <LSYS>;
		};
		lrclk {
			timeout-ms = <20>;
			key-positions = <2 3>;
			bindings = <&mkp RCLK>;
			layers = <LSYS>;
		};
		combo_del {
			timeout-ms = <30>;
			key-positions = <17 18>;
			bindings = <&kp DEL>;
			layers = <AL1>;
		};
    		combo_enter {
			timeout-ms = <30>;
			key-positions = <7 8>;
			bindings = <&kp RET>;
			layers = <AL1>;
   		 };
 	 	combo_tab {
			timeout-ms = <30>;
			key-positions = <1 2>;
			bindings = <&kp TAB>;
			layers = <AL1>;
    		};
    		combo_esc {
			timeout-ms = <30>;
			key-positions = <11 12>;
			bindings = <&kp ESC>;
			layers = <AL1>;
	 	};

	};

	behaviors {
		hm_l: homerow_mods_left {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS_L";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <250>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <6 7 8 16 17 18 19>; // right hand
		};
		hm_r: homerow_mods_right {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS_R";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <250>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <1 2 3 10 11 12 13>; // left hand
		};
		sr: shift_layer {
			compatible = "zmk,behavior-hold-tap";
			label = "SHIFT_LAYER";
			#binding-cells = <2>;
			tapping-term-ms = <300>;
			quick_tap_ms = <0>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&to>;
			retro-tap;
		};
		hl_l: homerow_layers_left {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_LAYERS_L";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <250>;
			flavor = "tap-preferred";
			bindings = <&mo>, <&kp>;
			hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
		};
		hl_r: homerow_layers_right {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_LAYERS_R";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <250>;
			flavor = "tap-preferred";
			bindings = <&mo>, <&kp>;
			hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
		};
		td: tapdance {
			compatible = "zmk,behavior-hold-tap";
			label = "TAPDANCE";
			#binding-cells = <2>;
			tapping-term-ms = <190>;
			quick-tap-ms = <250>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
		alpha2macro: behavior_macro_1 {
			compatible = "zmk,behavior-macro";
			label = "MACRO1";
			#binding-cells = <0>;
			bindings = < &sl AL2 >;
		};
		caps_alpha2macro: behavior_macro_2 {
			compatible = "zmk,behavior-macro";
			label = "MACRO2";
			#binding-cells = <0>;
			bindings = < &sl AL2U >;
		};
	};

	//			00	01	02			03	04	05
	//		06	07	08	09			10	11	12	13
	//					14	15	16	17

	keymap {
		compatible = "zmk,keymap";

		alpha1 {
			bindings = <
					&none	&hm_l LCTL L	&hm_l LALT G		&hm_l LGUI D	&none	&none	&hm_r RGUI H	&hm_r RALT U	&hm_r RCTL O	&none  
				&hl_l NM1 I	&hl_l SM2 S	&hl_l SM1 R		&hl_l SYS T	&none	&none	&hl_r SYS N	&hl_r SM1 E	&hl_r SM2 A	&hl_r NM1 C	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none
								&mt LSHIFT SPC	&mt LC(LA(LGUI)) BKSP			&key_repeat	&alpha2macro
			>;
		};

		alpha2 {
			bindings = <
				&none	&kp Q	&kp X	&kp V	&none	&none	&kp Y	&kp J		&kp P	&none
				&kp Z	&kp W	&kp B	&kp F	&none	&none	&kp M	&kp K		&kp COMMA	&kp DOT	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none
						&caps_alpha2macro	&trans			&none	&to AL1	
			>;
		};

		sym1 {
			bindings = <
				&none	&kp LA(N3)	&kp LS(N3)	&kp PIPE	&none	&none	&kp CARET	&kp LS(COMMA)	&kp LS(DOT)	&none		
			&kp TILDE	&kp GRAVE	&kp UNDER	&kp BSLH	&none	&none	&kp LBKT	&kp RBKT	&kp QMARK 	&kp FSLH	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	
							&trans		&trans				&trans		&trans
			>;
		};

		sym2 {
		bindings = <
				&none		&hm_l LCTL LS(N4) 	&hm_l LALT LS(N5)	&hm_l LGUI LS(N6)	&none 	&none	&hm_r RGUI LS(LBKT) 	&hm_r RALT LS(RBKT)		&hm_r RCTL LS(PLUS)	&none	
				&kp LS(MINUS)	&kp LS(N1) 		&kp LS(N2)		&kp LS(N3)		&none	&none	&kp LS(N7)		&kp LS(N8)			&kp LS(N9)   		&kp COLON	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none
									&kp LS(N9) 		&kp LS(N0) 				&trans 			&trans  	 
		>;
		};

		num {
		bindings = <
				&none		&hm_l LCTL N4	&hm_l LALT N5	&hm_l LGUI N6	&none	&none	&hm_r RGUI LBKT	&hm_r RALT RBKT	&hm_r RCTL PLUS	&none
				&kp MINUS	&kp N1		&kp N2		&kp N3		&none	&none	&kp N7 		&kp N8		&kp N9		&kp SEMI	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none
								&kp N0 		&kp DOT 				&trans		&trans  	 
		>;
		};
		
		sys {
			bindings = <
				&none			&kp LG(GRAVE)	&kp LC(LS(TAB))		&kp LG(LS(A))	&none	&none	&kp LC(LS(TAB))		&kp UP		&kp BKSP	&none
				&kp LG(Z)		&td HOME DEL	&td END LG(LBKT)	&kp LG(RBKT)	&none	&none	&kp LEFT		&kp DOWN	&kp RIGHT	&kp RET	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none
									&to AL1			&kp LALT			&td LG(V) LG(C)		&kp RGUI
			>;
		};
		
		lsys {
			bindings = <
				&none	&kp LC(LS(TAB))	&kp UP		&kp RC(TAB)	&none	&none	&none	&none	&none	&none
				&kp RET	&kp LEFT		&kp DOWN	&kp RIGHT	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none
								&kp RGUI	&td LG(V) LG(C)			&none	&to AL1	
			>;
		};

		alpha2cap {
			bindings = <
				&none		&kp LS(Q)	&kp LS(X)	&kp LS(V)	&none	&none		&kp LS(Y)	&kp LS(J)		&kp LS(P)	&none
				&kp LS(Z)	&kp LS(W)	&kp LS(B)	&kp LS(F)	&none	&none		&kp LS(M)	&kp LS(K)	&kp APOS	&kp SQT	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none
								&trans		&trans					&trans		&trans
			>;
		};

	};
};
